1. 消息系统
	1.1 概述
			消息系统用于处理单位间通信，每个世界消息系统相对独立。
			消息系统依靠特殊的类RTTI机制确定消息具体类型，仅需保证消息类继承自消息基类，
		使用者可自行设计消息类，保证灵活性的同时保证了通用性。
			消息发送方式分为三种 单播(Unicast), 组播(Multicast), 广播(Broadcast)。
			单播 消息创建时需指定目标单位ID，并在发送时发送至对应单位的 消息接收区。
			组播 消息创建时需指定目标单位ID列表(类型为 std::vector<ecs::entity>)，并在发送时发送至对应单位的 消息接收区。
			广播 消息无需指定接收单位，将发送至所有监听单位的 消息接收区
			任何单位若需接收消息，均需在消息系统接收区注册自身，否则即使作为消息目标，也不会接收到任何消息

	1.2 消息基类
		1.2.1 基本信息  消息基类定义于"Message.h"中，所有消息类均应由该基类继承而来

		1.2.2 数据成员
			1.2.2.1 entity senderId  用于存储消息发送者的ID

			1.2.2.2 MessageTypeId type  用于存储该消息的类型ID，类似于RTTI，注意，该类型每个消息系统各自独立，
										创建消息前应当向消息管理器注册该类型并过去对应消息类型的ID

		1.2.3 基类方法
			1.2.3.1 entity getSender()  用于获取发送者ID

			1.2.3.2 MessageTypeId getType()  用于获取消息类型ID

	1.3 消息管理器
		1.3.1 消息管理器内部成员	部分数据成员使用双缓冲，在此不予表示
			1.3.1.1 std::vector<std::unique_ptr<MessageBase>> msgUnicastList  用于收集所有的 单播 消息

			1.3.1.2 std::vector<entity> unicastTargetList  用于收集所有 单播 消息的目标单位ID

			1.3.1.3 std::vector<std::unique_ptr<MessageBase>> msgMulticastList  用于收集所有的 组播 消息
			
			1.3.1.4 std::vector<std::vector<entity>> multicastTargetList  用于收集所有 组播 消息的目标ID列表

			1.3.1.5 std::vector<std::unique_ptr<MessageBase>> msgBroadcastList  用于收集所有的 广播 消息

			1.3.1.6 bool active  用于确定双缓冲活跃缓冲区

			1.3.1.7 std::mutex mutex  用于确保线程安全

			1.3.1.8 MessageTypeManager messageTypeManager  消息类型管理器，用于注册消息，获取对应类型的类型ID

			1.3.1.9 ComponentPool<std::vector<MessageBase*>> messageList  消息接收区 为每个已注册单位管理接收到的消息，若需查询单位已接收消息，则需在此查询
																		该成员实际不持有消息，仅持有消息指针，由于消息生命周期为单帧，且无RAII包装，在需要长期
																		持有消息时，应自行复制到外部，而不是仅仅复制 消息接收区 的指针数组，因为在下一帧该数组
																		中的所有指针将变为野指针

		1.3.2 消息管理器公有方法	私有方法与 获取类内部成员 的接口不予介绍
			1.3.2.1 懒得写了，自己翻源码
			